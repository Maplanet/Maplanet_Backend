FROM node:18-alpine As Development
# pm2 설치
RUN yarn global add pm2

RUN mkdir -p /var/app
WORKDIR /var/app
COPY . .
RUN yarn install --frozen-lockfile
RUN yarn build
#EXPOSE 3000
# pm2를 사용하여 애플리케이션 실행
#COPY . .
CMD ["pm2-runtime", "start", "ecosystem.config.js"]
# 개발 환경을 위한 stage
# FROM node:18-alpine AS development

# # 필요한 패키지 설치 및 작업 디렉토리 설정
# RUN yarn global add pm2
# WORKDIR /var/app

# # 소스 코드 복사 및 종속성 설치
# COPY . .
# RUN yarn install --frozen-lockfile

# # 애플리케이션 빌드
# RUN yarn build

# # 개발 서버 실행
# CMD ["pm2-runtime", "start", "ecosystem.config.js"]

# # 프로덕션 환경을 위한 stage
# FROM node:18-alpine AS production

# # 필요한 패키지 설치 및 작업 디렉토리 설정
# RUN yarn global add pm2
# WORKDIR /var/app

# # 소스 코드 복사 및 종속성 설치
# COPY . .
# RUN yarn install --frozen-lockfile --production

# # 애플리케이션 빌드
# RUN yarn build

# # 프로덕션 서버 실행
# CMD ["pm2-runtime", "start", "ecosystem.config.js"]


# # The first thing we need to do is define from what image we want to build from. 
# # Here we will use the latest LTS (long term support) version 18 of node available from the Docker Hub
# FROM node:18-alpine AS PROD_BUILD_INTERMEDIATE

# RUN npm i -g @nestjs/cli

# # Next we create a directory to hold the application code inside the image,
# # this will be the working directory for your application:
# WORKDIR /usr/src/app

# # To bundle your app's source code inside the Docker image,
# COPY src ./src/
# COPY nest-cli.json .
# COPY yarn.lock .
# COPY package.json .
# COPY tsconfig.json .
# COPY tsconfig.build.json .

# # This command will not install upgraded pkgs. for more visit link
# # https://stackoverflow.com/a/76219090/3296607
# RUN yarn install --ignore-scripts --frozen-lockfile --production

# # Creates a "dist" folder with the production build
# RUN yarn run build

# # Use the nonroot user from the image (instead of the root user)
# RUN addgroup -S nonroot \
#     && adduser -S nonroot -G nonroot

# # Use the nonroot user from the image (instead of the root user)
# USER nonroot

# FROM node:18-alpine AS PROD

# # Copy the bundled code from the PROD_BUILD_INTERMEDIATE stage to the PROD image
# COPY --from=PROD_BUILD_INTERMEDIATE /usr/src/app/node_modules /opt/nest-app/node_modules
# COPY --from=PROD_BUILD_INTERMEDIATE /usr/src/app/dist /opt/nest-app

# RUN apk add --no-cache curl
# RUN npm install pm2 -g

# EXPOSE 3000
# ENV NODE_ENV=production
# ENV AWS_NODEJS_CONNECTION_REUSE_ENABLED=1

# # Use the nonroot user from the image (instead of the root user)
# RUN addgroup -S nonroot \
#     && adduser -S nonroot -G nonroot

# # Use the nonroot user from the image (instead of the root user)
# USER nonroot

# # CMD ["node", "/opt/nest-app/main.js"]
# CMD ["pm2-runtime", "/opt/nest-app/main.js"]



# FROM node:16

# WORKDIR /app

# COPY package*.json ./

# RUN npm install

# COPY . . 

# ENV PORT=8080

# EXPOSE 8080

# CMD ["npm", "run", "start:dev"]


# FROM node:18-alpine AS base
# RUN npm i -g pnpm

# FROM base AS development 
# ARG APP 
# ARG NODE_ENV=development 
# ENV NODE_ENV=${NODE_ENV} 
# WORKDIR /usr/src/app 
# COPY package.json pnpm-lock.yaml ./ 
# RUN pnpm install
# COPY . . 
# RUN pnpm run build ${APP} 

# FROM base AS production 
# ARG APP 
# ARG NODE_ENV=production 
# ENV NODE_ENV=${NODE_ENV} 
# WORKDIR /usr/src/app 
# COPY package.json pnpm-lock.yaml ./ 
# RUN pnpm install --prod
# COPY --from=development /usr/src/app/dist ./dist 


# # Base Image (User alpine for image efficiency)
# FROM node:14.16.0-alpine as base

# # set our node environment, either development or production
# # defaults to production, compose overrides this to development on build and run
# ENV NODE_ENV production

# # you'll likely want the latest npm, regardless of node version, for speed and fixes
# # but pin this version for the best stability
# RUN npm i npm@latest -g

# # Create work directory for node dependencies (we are following the approach of using node_modules in a separate folder, in order for us to use both the host node_modules when developing on host & docker node_modules when developing on docker)
# WORKDIR /opt/node

# # Chnage owner of /opt/app to node user
# RUN chown -R node:node /opt/node

# # Copy only package.json & package-lock.json(if exists) first under user node
# COPY --chown=node:node package.json package-lock.json* ./

# # Switch to user node
# USER node

# # Install only production dependencies since we already mentioned the NODE_ENV arg
# RUN npm config list \
#     && npm ci \ 
#     && npm cache clean --force

# # For Development
# FROM base as dev

# # Change NODE_ENV
# ENV NODE_ENV development

# # Install dev dependencies
# RUN npm config list \
#     && npm install --only=development \
#     && npm cache clean --force

# # This is created and mounted with the src of the host for development, we don't need to copy anything for development environment
# WORKDIR /opt/node/app

# # Set path since the docker node_modules is in a separate folder (specifically a folder upper a directory created in base stage)
# ENV PATH /opt/node/node_modules/.bin:$PATH

# # Run server in watch mode (development mode)
# CMD ["npm", "run", "start:dev"]

# # For Test
# FROM dev as test

# # Copy everything into the /opt/work/app that has been mentioned in dev stage
# COPY --chown=node:node . .

# # Audit the node_modules
# RUN npm audit

# # Token as build args
# ARG MICROSCANNER_TOKEN

# # Add microscanner into the image
# ADD https://get.aquasec.com/microscanner /

# # Switch to root in order to execute with root permission
# USER root

# RUN chmod +x /microscanner

# # Run the scanner
# RUN /microscanner $MICROSCANNER_TOKEN --continue-on-failure

# # For Building Source
# FROM dev as build

# COPY --chown=node:node . .

# RUN npm run build

# # For Production
# FROM base as prod
# # Create work directory
# WORKDIR /opt/node/app

# # Change owner to user node
# RUN chown -R node:node /opt/node/app

# # Copy only the dist folder from build stage
# COPY --chown=node:node --from=build /opt/node/app/dist/ ./dist

# # Run server in production


# # Add an env to save ARG
# ENV APP_MAIN_FILE=dist/apps/${APP}/main 
# #CMD node ${APP_MAIN_FILE}

# CMD ["node", "./dist/main.js"]